// Generated by CoffeeScript 1.6.3
(function() {
  var Mocha, assert, replaceAll, time, vm, _;

  vm = require("vm");

  Mocha = require("mocha");

  _ = require("lodash");

  assert = require('assert');

  time = Date.now();

  exports.test = function(o, cb) {
    var JSONReporter, Log, TAPReporter, clean, context, filter, log, mocha, pseudoFile, title;
    o = o || {};
    o.ui = o.ui || 'bdd';
    o.reporter = o.reporter || 'tap';
    o.context = o.context || {};
    o.filter = o.filter || [];
    Log = "";
    log = o.log || function(obj) {
      if (obj) {
        if (typeof obj === "string") {
          return Log += '\n' + obj;
        } else if (typeof obj === "object") {
          return Log += '\n' + JSON.stringify(obj, null, 2);
        } else {
          return Log += '\n' + obj + '';
        }
      }
    };
    context = {
      'assert': assert,
      'it': this.it,
      'log': log
    };
    context = _.extend(o.context, context);
    filter = function(hay) {
      var v, _i, _len, _ref;
      _ref = o.filter;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        v = _ref[_i];
        hay = replaceAll(v, "", hay);
      }
      return hay;
    };
    process.on('uncaughtException', function(err) {
      if (err && err.stack) {
        return log(err.stack);
      } else {
        return log(err);
      }
    });
    JSONReporter = function(runner) {
      var failures, passes, pending, self, tests;
      self = this;
      tests = [];
      pending = [];
      failures = [];
      passes = [];
      runner.on('test end', function(test) {
        tests.push(test);
      });
      runner.on('pass', function(test) {
        return passes.push(test);
      });
      runner.on('fail', function(test, err) {
        test.err = err;
        return failures.push(test);
      });
      runner.on('pending', function(test) {
        return pending.push(test);
      });
      return runner.on('end', function() {
        var obj;
        obj = {
          stats: self.stats,
          tests: tests.map(clean),
          pending: pending.map(clean),
          failures: failures.map(clean),
          passes: passes.map(clean),
          stats: passes.length + ' out of ' + (passes.length + failures.length) + ' cases passed'
        };
        runner.testResults = obj;
        o.output = filter(JSON.stringify(obj, null, 2));
        return o.reporter = 'json';
      });
    };
    TAPReporter = function(runner) {
      var failures, n, passes, self, stats;
      self = this;
      stats = this.stats;
      n = 1;
      passes = 0;
      failures = 0;
      runner.on('start', function() {
        var total;
        total = runner.grepTotal(runner.suite);
        return log(1 + '..' + total);
      });
      runner.on('test end', function() {
        return ++n;
      });
      runner.on('pending', function(test) {
        return log('ok ' + n + ' ' + title(test) + ' # SKIP -');
      });
      runner.on('pass', function(test) {
        passes++;
        return log('ok ' + n + ' ' + title(test));
      });
      runner.on('fail', function(test, err) {
        failures++;
        log('not ok ' + n + ' ' + title(test));
        if (err.stack) {
          return log(err.stack.replace(/^/gm, '  '));
        }
      });
      return runner.on('end', function() {
        log('');
        log('# tests ' + (passes + failures));
        log('# pass ' + passes);
        log('# fail ' + failures);
        o.reporter = 'tap';
        return o.output = filter(Log);
      });
    };
    if (o.reporter === 'json') {
      mocha = new Mocha({
        ui: o.ui,
        reporter: JSONReporter
      });
    } else {
      mocha = new Mocha({
        ui: o.ui,
        reporter: TAPReporter
      });
    }
    title = function(test) {
      return test.fullTitle().replace(/#/g, '');
    };
    clean = function(test) {
      return {
        title: test.title,
        fullTitle: test.fullTitle(),
        duration: test.duration,
        err: JSON.stringify(test.err || {}, null, 2)
      };
    };
    pseudoFile = function(mocha, context, fileContent) {
      mocha.suite.emit("pre-require", context, ":memory:", mocha);
      mocha.suite.emit("require", vm.runInNewContext(fileContent, context, {
        displayErrors: true
      }), ":memory:", mocha);
      return mocha.suite.emit("post-require", context, ":memory:", mocha);
    };
    pseudoFile(mocha, context, o.test);
    return mocha.run(function() {
      return setTimeout(function() {
        delete o.filter;
        delete o.context;
        return cb(null, o);
      }, 5);
    });
  };

  replaceAll = function(find, replace, str) {
    find = find.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    return str.replace(new RegExp(find, 'g'), replace);
  };

}).call(this);

/*
//@ sourceMappingURL=index.map
*/
